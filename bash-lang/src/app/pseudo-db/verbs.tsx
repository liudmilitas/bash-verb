// –ì–õ–ê–ì–û–õ - “†–´–õ–´–ú

export const verbs: object[] = [
  {
    id: 1,
    imperative: "–∞—à–∞",
    infinitive: "–∞—à–∞—Ä“ì–∞",
    properties: {
      is_regular: true,
      is_soft: false,
      is_last_vowel: true,
      is_type_a: true,
    },
    translations: {
      ru: "–µ—Å—Ç—å",
      eng: "to eat",
      emoji: "üçΩüòã",
    },
  },
  {
    id: 2,
    imperative: "—ç—à–ª”ô",
    infinitive: "—ç—à–ª”ô—Ä–≥”ô",
    properties: {
      is_regular: true,
      is_soft: true,
      is_last_vowel: true,
      is_type_a: true,
    },
    translations: {
      ru: "—Ä–∞–±–æ—Ç–∞—Ç—å",
      eng: "to work",
      emoji: "üíºüí™",
    },
  },
  {
    id: 3,
    imperative: "–π”©—Ä”©",
    infinitive: "–π”©—Ä”©—Ä–≥”ô",
    properties: {
      is_regular: true,
      is_soft: true,
      is_last_vowel: true,
      is_type_a: false,
    },
    translations: {
      ru: "—Ö–æ–¥–∏—Ç—å",
      eng: "to go",
      emoji: "üö∂‚Äç‚ôÇÔ∏èüë©‚Äçü¶Ø",
    },
  },
  {
    id: 4,
    imperative: "—è“ô",
    infinitive: "—è“ô—ã—Ä“ì–∞",
    properties: {
      is_regular: true,
      is_soft: false,
      is_last_vowel: false,
      is_type_a: true,
    },
    translations: {
      ru: "–ø–∏—Å–∞—Ç—å",
      eng: "to write",
      emoji: "üìù‚úçÔ∏è",
    },
  },
  {
    id: 5,
    infinitive: "–∫–µ–π–µ–Ω–µ—Ä–≥”ô",
    imperative: "–∫–µ–π–µ–Ω",
    properties: {
      is_regular: true,
      is_soft: true,
      is_last_vowel: false,
      is_type_a: false,
    },
    translations: {
      ru: "–æ–¥–µ–≤–∞—Ç—å—Å—è",
      eng: "to get dressed",
      emoji: "üëïüëñ",
    },
  },
  {
    id: 6,
    infinitive: "—Å–æ“°–æ—Ä“ì–∞",
    imperative: "—Å–æ“°–æ",
    properties: {
      is_regular: true,
      is_soft: false,
      is_last_vowel: true,
      is_type_a: false,
    },
    translations: {
      ru: "–∫–æ–ø–∞—Ç—å",
      eng: "to dig",
      emoji: "üå±üï≥Ô∏è",
    },
  },
];

//

export function generatePresentSimple(verb: any, isNegative: boolean) {
  // –ì–ª–∞–≥–æ–ª—å–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const lastVowelTypeASoftEndings = [
    "–π–µ–º",
    "–π“ª–µ“£",
    "–π",
    "–π–±–µ“ô",
    "–π“ª–µ–≥–µ“ô",
    "–π“ô”ô—Ä",
  ];
  const lastVowelTypeAHardEndings = [
    "–π—ã–º",
    "–π“ª—ã“£",
    "–π",
    "–π–±—ã“ô",
    "–π“ª—ã–≥—ã“ô",
    "–π“ô–∞—Ä",
  ];
  const lastVowelTypeOSoftEndings = [
    "–π”©–º",
    "–π“ª”©“£",
    "–π",
    "–π–±”©“ô",
    "–π“ª”©–≥”©“ô",
    "–π“ô”ô—Ä",
  ];
  const lastVowelTypeOHardEndings = [
    "–π–æ–º",
    "–π“ª–æ“£",
    "–π",
    "–π–±–æ“ô",
    "–π“ª–æ–≥–æ“ô",
    "–π“ô–∞—Ä",
  ];
  const lastConsonantSoftEndings = [
    "”ô–º",
    "”ô“ª–µ“£",
    "”ô",
    "”ô–±–µ“ô",
    "”ô“ª–µ–≥–µ“ô",
    "”ô–ª”ô—Ä",
  ];
  const lastConsonantHardEndings = [
    "–∞–º",
    "–∞“ª—ã“£",
    "–∞",
    "–∞–±—ã“ô",
    "–∞“ª—ã–≥—ã“ô",
    "–∞–ª–∞—Ä",
  ];

  const { properties, imperative } = verb;
  const { is_regular, is_soft, is_type_a, is_last_vowel } = properties;
  let verbType;

  if (is_regular) {
    if (is_soft && is_type_a && is_last_vowel) {
      verbType = lastVowelTypeASoftEndings;
    } else if (!is_soft && is_type_a && is_last_vowel) {
      verbType = lastVowelTypeAHardEndings;
    } else if (is_soft && !is_type_a && is_last_vowel) {
      verbType = lastVowelTypeOSoftEndings;
    } else if (!is_soft && !is_type_a && is_last_vowel) {
      verbType = lastVowelTypeOHardEndings;
    } else if (is_soft && !is_last_vowel) {
      verbType = lastConsonantSoftEndings;
    } else if (!is_soft && !is_last_vowel) {
      verbType = lastConsonantHardEndings;
    } else {
      return "Invalid verb object!";
    }

    if (isNegative && is_soft){
      if (is_last_vowel) {
        lastVowelTypeASoftEndings.map((ending) => imperative + '–º”ô' + ending);
      }
      return verbType?.map((ending) => imperative + '–º”ô' + ending);
    } else if (isNegative && !is_soft) {
      if (is_last_vowel) {
        lastVowelTypeAHardEndings.map((ending) => imperative + '–º–∞' + ending);
      }
      return verbType?.map((ending) => imperative + '–º–∞' + ending);
    } else {
      return verbType?.map((ending) => imperative + ending);
    }

  } else {
    return "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–ª–∞–≥–æ–ª!";
  }
}
